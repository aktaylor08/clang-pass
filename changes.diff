diff --git a/InstrumentBranches.cpp b/InstrumentBranches.cpp
index f92e164..38f6380 100644
--- a/InstrumentBranches.cpp
+++ b/InstrumentBranches.cpp
@@ -136,84 +136,90 @@ void InstrumentBranches::instrumentBranch(branch_thresh_pair branch){
 
 	bool found_cmp = false;
 	//loop through the thresholds
-	for(Instruction* thresh : branch.second){
-		//get the things tracing back to thresholds
-	    instruction_set insts;
-        getConnectingInstructions(branch.first, thresh, insts); 
-		for(Instruction* i: insts){
-			//find comparisions
-
-			if(CmpInst* cmp  = dyn_cast<CmpInst>(&*i)){
-				//store result
-				found_cmp = true;
-				std::ostringstream os;
-				os << "res_" << rnum;
-				rnum++;
-				std::pair<std::string, Instruction*> val(os.str(),cmp);
-				mapping.insert(val);
-
-				for(Use& U : cmp -> operands()){
-					if(Instruction* op_inst = dyn_cast<Instruction>(*&U)){
-						//store threshold value
-						if(targetReachableBack(op_inst, thresh)){
-							std::ostringstream thresh_n;
-							thresh_n << "thresh_" << tnum;
-							tnum++;
-							std::pair<std::string, Instruction*> val(thresh_n.str(),op_inst);
-							mapping.insert(val);
-						}else{
-							//store comparator
-							std::ostringstream cname;
-							cname << "cmp_" << cnum;
-							cnum++;
-							std::pair<std::string, Instruction*> val(cname.str(),op_inst);
-							mapping.insert(val);
-						}
-					}
-				}
-			}//end comparision check
-		}//end loop back to thresh source
-
-		//DO SOMETHING HERE TO SEE IF IT IS JUST A FLAG...
-		if(!found_cmp){
+	if(branch.second.size() > 1){
+		errs () << "\n\nMore than one threshold in instruction??:" << branch.second.size() << "\n";
+		branch.first -> dump();
+	}
+	//get the things tracing back to thresholds
+	Instruction* thresh_inst = branch.second[0];
+
+	//get all of the values that the threshold is used in
+	instruction_set insts;
+	getConnectingInstructions(branch.first, thresh_inst, insts);
+	for(Instruction* i: insts){
+		//is it a comparision
+		if(CmpInst* cmp  = dyn_cast<CmpInst>(&*i)){
+			//store result
+			found_cmp = true;
 			std::ostringstream os;
 			os << "res_" << rnum;
 			rnum++;
-			if(Instruction* I = dyn_cast<Instruction>(branch.first -> getCondition())){
-				std::pair<std::string, Instruction*> val_res(os.str(),I);
-				mapping.insert(val_res);
-			}else{
-				//INVALID ASSERTION ON WHAT WE BE IN THE BRANCH!
-				assert(false);
+			std::pair<std::string, Instruction*> val(os.str(),cmp);
+			mapping.insert(val);
+
+			//Loop through the operands
+			for(Use& U : cmp -> operands()){
+				if(Instruction* op_inst = dyn_cast<Instruction>(*&U)){
+					//store threshold value
+					if(targetReachableBack(op_inst, thresh_inst)){
+						std::ostringstream thresh_n;
+						thresh_n << "thresh_" << tnum;
+						tnum++;
+						std::pair<std::string, Instruction*> val(thresh_n.str(),op_inst);
+						mapping.insert(val);
+					}else{
+						//store comparator
+						std::ostringstream cname;
+						cname << "cmp_" << cnum;
+						cnum++;
+						std::pair<std::string, Instruction*> val(cname.str(),op_inst);
+						mapping.insert(val);
+					}
+				}
 			}
-			std::ostringstream cname;
-			cname << "cmp_" << cnum;
-			cnum++;
-			std::ostringstream thresh_n;
-			thresh_n << "thresh_" << tnum;
-			tnum++;
-			std::pair<std::string, Instruction*> val1(thresh_n.str(),thresh);
-			mapping.insert(val1);
-			std::pair<std::string, Instruction*> val2(cname.str(),thresh);
-			mapping.insert(val2);
+		}//end comparision check
+	}//end loop back to thresh source
+
+	//DO SOMETHING HERE TO SEE IF IT IS JUST A FLAG...
+	if(!found_cmp || cnum == 0 || tnum == 0){
+		errs() << "It is a flag!\n";
+		std::ostringstream os;
+		os << "res_" << 0;
+		rnum++;
+		if(Instruction* I = dyn_cast<Instruction>(branch.first -> getCondition())){
+			std::pair<std::string, Instruction*> val_res(os.str(),I);
+			mapping.insert(val_res);
+		}else{
+			//INVALID ASSERTION ON WHAT WE BE IN THE BRANCH!
+			assert(false);
 		}
+		std::ostringstream cname;
+		cname << "cmp_" << 0;
+		cnum++;
+		std::ostringstream thresh_n;
+		thresh_n << "thresh_" << 0;
+		tnum++;
+		std::pair<std::string, Instruction*> val1(thresh_n.str(),thresh_inst);
+		mapping.insert(val1);
+		std::pair<std::string, Instruction*> val2(cname.str(),thresh_inst);
+		mapping.insert(val2);
+	}
 
-	}//end loop through all of the thresholds involved here.
 
 	//Now check if there is more than 1 threshold and comparision?
 	if(rnum>1){
 		errs() << "multiple CHECKS!\n";
+	}
+	std::ostringstream result_n;
+	result_n << "result";
+	if(Instruction* I = dyn_cast<Instruction>(branch.first -> getCondition())){
+		std::pair<std::string, Instruction*> val_res(result_n.str(),I);
+		mapping.insert(val_res);
 	}else{
-	    std::ostringstream result_n;
-	    result_n << "result";
-	    if(Instruction* I = dyn_cast<Instruction>(branch.first -> getCondition())){
-		    std::pair<std::string, Instruction*> val_res(result_n.str(),I);
-		    mapping.insert(val_res);
-	    }else{
-		    //INVALID ASSERTION ON WHAT WE BE IN THE BRANCH!
-		    assert(false);
-	    }
-    }
+		//INVALID ASSERTION ON WHAT WE BE IN THE BRANCH!
+		assert(false);
+	}
+
 
 
 	boost::uuids::uuid uuid = boost::uuids::random_generator()();
@@ -225,6 +231,7 @@ void InstrumentBranches::instrumentBranch(branch_thresh_pair branch){
 
 	std::pair<std::string, int> location = get_file_lineno(branch.first);
 	Json::Value thresh_info;
+
 	//TODO fix tdistance calculator calculations
 	thresh_info["distance"] = 1;
 	thresh_info["file"] = location.first;
@@ -260,9 +267,7 @@ void InstrumentBranches::instrumentBranch(branch_thresh_pair branch){
 	indexes[0] = ConstantInt::getSigned(Type::getInt32Ty(M.getContext()), 0);
 	indexes[1] = ConstantInt::getSigned(Type::getInt32Ty(M.getContext()), 0);
 
-	Constant* to_global = ConstantExpr::getGetElementPtr(GV, indexes, true);
-
-
+	Constant* to_global = ConstantExpr::getGetElementPtr(GV -> getType(), GV, indexes);
 
 	//Create the argument list next.  Do this by adding values from the mapping we made and from the global
 	//pointer that we just created
diff --git a/ParamUsageFinder.cpp b/ParamUsageFinder.cpp
index 734d8a8..e2e9b5b 100644
--- a/ParamUsageFinder.cpp
+++ b/ParamUsageFinder.cpp
@@ -42,6 +42,15 @@ void ParamUsageFinder::add_to_result(BranchInst* branch, Instruction* threshold)
 		branch_thresh_pair to_add(branch, v);
 		results.insert(to_add);
 	}else{
+		for(Instruction* i: results.at(branch)){
+			if (i == threshold){
+				errs() << "Ignoring duplicate";
+				return;
+			}
+				i -> dump();
+				threshold -> dump();
+				errs() << "\n\n";
+		}
 		results.at(branch).push_back(threshold);
 	}
 }
