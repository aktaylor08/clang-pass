Index: Makefile
===================================================================
--- Makefile	(revision 229871)
+++ Makefile	(working copy)
@@ -31,7 +31,7 @@
   OPTIONAL_DIRS := tools/clang/utils/TableGen
 else
   DIRS := lib/Support lib/TableGen utils lib/IR lib tools/llvm-shlib \
-          tools/llvm-config tools docs cmake unittests
+          tools/llvm-config tools docs cmake #unittests
   OPTIONAL_DIRS := projects bindings
 endif
 
Index: include/llvm/InitializePasses.h
===================================================================
--- include/llvm/InitializePasses.h	(revision 229871)
+++ include/llvm/InitializePasses.h	(working copy)
@@ -19,6 +19,20 @@
 
 class PassRegistry;
 
+///Initialize all of the passes I put in the Ros Threshold passes registry
+void initializeRosThresholds(PassRegistry&);
+void initializeSimpleCallGraphPass(PassRegistry&);
+void initializeClassObjectAccessPass(PassRegistry&);
+void initializeExternCallFinderPass(PassRegistry&);
+void initializeIfStatementsPass(PassRegistry&);
+void initializeBackwardPropigatePass(PassRegistry&);
+void initializeParamCallFinderPass(PassRegistry&);
+void initializeParamUsageFinderPass(PassRegistry&);
+void initializeGatherResultsPass(PassRegistry&);
+void initializeFindConstCompsPass(PassRegistry&);
+void initializeInstrumentBranchesPass(PassRegistry&);
+
+
 /// initializeCore - Initialize all passes linked into the
 /// TransformUtils library.
 void initializeCore(PassRegistry&);
@@ -62,6 +76,7 @@
 /// initializeCodeGen - Initialize all passes linked into the CodeGen library.
 void initializeTarget(PassRegistry&);
 
+
 void initializeAAEvalPass(PassRegistry&);
 void initializeAddDiscriminatorsPass(PassRegistry&);
 void initializeADCEPass(PassRegistry&);
Index: include/llvm/LinkAllPasses.h
===================================================================
--- include/llvm/LinkAllPasses.h	(revision 229871)
+++ include/llvm/LinkAllPasses.h	(working copy)
@@ -35,6 +35,7 @@
 #include "llvm/Transforms/Utils/SymbolRewriter.h"
 #include "llvm/Transforms/Utils/UnifyFunctionExitNodes.h"
 #include "llvm/Transforms/Vectorize.h"
+#include "llvm/Transforms/RosThresholds.h"
 #include <cstdlib>
 
 namespace {
@@ -155,6 +156,7 @@
       (void) llvm::createPrintBasicBlockPass(*(llvm::raw_ostream*)nullptr);
       (void) llvm::createModuleDebugInfoPrinterPass();
       (void) llvm::createPartialInliningPass();
+
       (void) llvm::createLintPass();
       (void) llvm::createSinkingPass();
       (void) llvm::createLowerAtomicPass();
@@ -171,6 +173,20 @@
       (void) llvm::createStraightLineStrengthReducePass();
       (void) llvm::createMemDerefPrinter();
 
+        //added custom passes here
+      (void) llvm::createSimpleCallGraphPass();
+      (void) llvm::createClassObjectAccessPass();
+      (void) llvm::createExternCallFinderPass();
+      (void) llvm::createIfStatementsPass();
+      (void) llvm::createBackwardPropigatePass();
+      (void) llvm::createParamCallFinderPass();
+      (void) llvm::createParamUsageFinderPass();
+      (void) llvm::createGatherResultsPass();
+      (void) llvm::createFindConstCompsPass();
+      (void) llvm::createInstrumentBranchesPass();
+        
+
+
       (void)new llvm::IntervalPartition();
       (void)new llvm::ScalarEvolution();
       ((llvm::Function*)nullptr)->viewCFGOnly();
Index: lib/LTO/LLVMBuild.txt
===================================================================
--- lib/LTO/LLVMBuild.txt	(revision 229871)
+++ lib/LTO/LLVMBuild.txt	(working copy)
@@ -19,4 +19,4 @@
 type = Library
 name = LTO
 parent = Libraries
-required_libraries = Analysis BitReader BitWriter CodeGen Core IPA IPO InstCombine Linker MC ObjCARC Object Scalar Support Target
+required_libraries = Analysis BitReader BitWriter CodeGen Core IPA IPO InstCombine Linker MC ObjCARC Object Scalar Support Target RosThresholds
Index: lib/LTO/LTOCodeGenerator.cpp
===================================================================
--- lib/LTO/LTOCodeGenerator.cpp	(revision 229871)
+++ lib/LTO/LTOCodeGenerator.cpp	(working copy)
@@ -104,6 +104,7 @@
 void LTOCodeGenerator::initializeLTOPasses() {
   PassRegistry &R = *PassRegistry::getPassRegistry();
 
+  initializeRosThresholds(R);
   initializeInternalizePassPass(R);
   initializeIPSCCPPass(R);
   initializeGlobalOptPass(R);
Index: lib/Transforms/CMakeLists.txt
===================================================================
--- lib/Transforms/CMakeLists.txt	(revision 229871)
+++ lib/Transforms/CMakeLists.txt	(working copy)
@@ -6,3 +6,4 @@
 add_subdirectory(Vectorize)
 add_subdirectory(Hello)
 add_subdirectory(ObjCARC)
+add_subdirectory(RosThresholds)
Index: lib/Transforms/IPO/IPO.cpp
===================================================================
--- lib/Transforms/IPO/IPO.cpp	(revision 229871)
+++ lib/Transforms/IPO/IPO.cpp	(working copy)
@@ -45,6 +45,7 @@
   initializeStripDeadDebugInfoPass(Registry);
   initializeStripNonDebugSymbolsPass(Registry);
   initializeBarrierNoopPass(Registry);
+  initializeRosThresholds(Registry);
 }
 
 void LLVMInitializeIPO(LLVMPassRegistryRef R) {
Index: lib/Transforms/IPO/LLVMBuild.txt
===================================================================
--- lib/Transforms/IPO/LLVMBuild.txt	(revision 229871)
+++ lib/Transforms/IPO/LLVMBuild.txt	(working copy)
@@ -20,4 +20,4 @@
 name = IPO
 parent = Transforms
 library_name = ipo
-required_libraries = Analysis Core IPA InstCombine Scalar Support TransformUtils Vectorize
+required_libraries = Analysis Core IPA InstCombine Scalar Support TransformUtils Vectorize RosThresholds
Index: lib/Transforms/IPO/PassManagerBuilder.cpp
===================================================================
--- lib/Transforms/IPO/PassManagerBuilder.cpp	(revision 229871)
+++ lib/Transforms/IPO/PassManagerBuilder.cpp	(working copy)
@@ -27,6 +27,10 @@
 #include "llvm/Transforms/IPO.h"
 #include "llvm/Transforms/Scalar.h"
 #include "llvm/Transforms/Vectorize.h"
+#include "llvm/Transforms/RosThresholds.h"
+//Not sure on these two...
+#include "llvm/Analysis/LoopPass.h"
+#include "llvm/IR/Dominators.h"
 
 using namespace llvm;
 
@@ -502,6 +506,20 @@
   if (OptLevel != 0)
     addLTOOptimizationPasses(PM);
 
+  PM.add(new LoopInfoWrapperPass());
+  PM.add(new DominatorTreeWrapperPass());
+  PM.add(createSimpleCallGraphPass());
+  PM.add(createClassObjectAccessPass());
+  PM.add(createIfStatementsPass());
+  PM.add(createBackwardPropigatePass());
+  PM.add(createParamCallFinderPass());
+  PM.add(createParamUsageFinderPass());
+  PM.add(createGatherResultsPass());
+  PM.add(createInstrumentBranchesPass());
+
+
+  PM.add(createInstrumentBranchesPass());
+
   if (VerifyOutput) {
     PM.add(createVerifierPass());
     PM.add(createDebugInfoVerifierPass());
Index: lib/Transforms/LLVMBuild.txt
===================================================================
--- lib/Transforms/LLVMBuild.txt	(revision 229871)
+++ lib/Transforms/LLVMBuild.txt	(working copy)
@@ -16,7 +16,7 @@
 ;===------------------------------------------------------------------------===;
 
 [common]
-subdirectories = IPO InstCombine Instrumentation Scalar Utils Vectorize ObjCARC
+subdirectories = IPO InstCombine Instrumentation Scalar Utils Vectorize ObjCARC RosThresholds
 
 [component_0]
 type = Group
Index: lib/Transforms/Makefile
===================================================================
--- lib/Transforms/Makefile	(revision 229871)
+++ lib/Transforms/Makefile	(working copy)
@@ -8,7 +8,7 @@
 ##===----------------------------------------------------------------------===##
 
 LEVEL = ../..
-PARALLEL_DIRS = Utils Instrumentation Scalar InstCombine IPO Vectorize Hello ObjCARC
+PARALLEL_DIRS = Utils Instrumentation Scalar InstCombine IPO Vectorize Hello ObjCARC RosThresholds
 
 include $(LEVEL)/Makefile.config
 
Index: tools/bugpoint/CMakeLists.txt
===================================================================
--- tools/bugpoint/CMakeLists.txt	(revision 229871)
+++ tools/bugpoint/CMakeLists.txt	(working copy)
@@ -15,6 +15,7 @@
   Target
   TransformUtils
   Vectorize
+  RosThresholds
   )
 
 # Support plugins.
Index: tools/bugpoint/Makefile
===================================================================
--- tools/bugpoint/Makefile	(revision 229871)
+++ tools/bugpoint/Makefile	(working copy)
@@ -10,7 +10,7 @@
 LEVEL := ../..
 TOOLNAME := bugpoint
 LINK_COMPONENTS := asmparser instrumentation scalaropts ipo linker bitreader \
-                   bitwriter irreader vectorize objcarcopts codegen
+                   bitwriter irreader vectorize objcarcopts codegen RosThresholds
 
 # Support plugins.
 NO_DEAD_STRIP := 1
Index: tools/gold/Makefile
===================================================================
--- tools/gold/Makefile	(revision 229871)
+++ tools/gold/Makefile	(working copy)
@@ -20,7 +20,7 @@
 # early so we can set up LINK_COMPONENTS before including Makefile.rules
 include $(LEVEL)/Makefile.config
 
-LINK_COMPONENTS := $(TARGETS_TO_BUILD) Linker BitWriter IPO
+LINK_COMPONENTS := $(TARGETS_TO_BUILD) Linker BitWriter IPO RosThresholds
 
 # Because off_t is used in the public API, the largefile parts are required for
 # ABI compatibility.
Index: tools/gold/gold-plugin.cpp
===================================================================
--- tools/gold/gold-plugin.cpp	(revision 229871)
+++ tools/gold/gold-plugin.cpp	(working copy)
@@ -41,6 +41,7 @@
 #include "llvm/Transforms/Utils/GlobalStatus.h"
 #include "llvm/Transforms/Utils/ModuleUtils.h"
 #include "llvm/Transforms/Utils/ValueMapper.h"
+#include "llvm/Transforms/RosThresholds.h"
 #include <list>
 #include <plugin-api.h>
 #include <system_error>
Index: tools/opt/CMakeLists.txt
===================================================================
--- tools/opt/CMakeLists.txt	(revision 229871)
+++ tools/opt/CMakeLists.txt	(working copy)
@@ -16,6 +16,7 @@
   Target
   TransformUtils
   Vectorize
+  RosThresholds
   )
 
 # Support plugins.
Index: tools/opt/LLVMBuild.txt
===================================================================
--- tools/opt/LLVMBuild.txt	(revision 229871)
+++ tools/opt/LLVMBuild.txt	(working copy)
@@ -19,4 +19,4 @@
 type = Tool
 name = opt
 parent = Tools
-required_libraries = AsmParser BitReader BitWriter CodeGen IRReader IPO Instrumentation Scalar ObjCARC all-targets
+required_libraries = AsmParser BitReader BitWriter CodeGen IRReader IPO Instrumentation Scalar ObjCARC all-targets RosThresholds
Index: tools/opt/Makefile
===================================================================
--- tools/opt/Makefile	(revision 229871)
+++ tools/opt/Makefile	(working copy)
@@ -9,7 +9,7 @@
 
 LEVEL := ../..
 TOOLNAME := opt
-LINK_COMPONENTS := bitreader bitwriter asmparser irreader instrumentation scalaropts objcarcopts ipo vectorize all-targets codegen
+LINK_COMPONENTS := bitreader bitwriter asmparser irreader instrumentation scalaropts objcarcopts ipo vectorize all-targets codegen RosThresholds
 
 # Support plugins.
 NO_DEAD_STRIP := 1
Index: tools/opt/opt.cpp
===================================================================
--- tools/opt/opt.cpp	(revision 229871)
+++ tools/opt/opt.cpp	(working copy)
@@ -326,6 +326,7 @@
   initializeRewriteSymbolsPass(Registry);
   initializeWinEHPreparePass(Registry);
   initializeDwarfEHPreparePass(Registry);
+  initializeRosThresholds(Registry);
 
 #ifdef LINK_POLLY_INTO_TOOLS
   polly::initializePollyPasses(Registry);
